@using uy.edu.ort.taller.aplicaciones.dominio
@using uy.edu.ort.taller.aplicaciones.utiles.Formatters
@model TallerAplicaciones.Models.PedidoEditModel
@{
    ViewBag.Title = "Editar Pedido";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Editar Pedido</h2>
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Editar Pedido</legend>
        
        
         <div class="editor-label">
            @Html.LabelFor(model => model.DistribuidorID)
        </div>
        <div class="editor-field">
            @if (Model.DistribuidoresDisponibles != null && Model.DistribuidoresDisponibles.Any())
            {
                @Html.DropDownListFor(m => m.DistribuidorID,
                                          Model.DistribuidoresDisponibles.Where(d => d.Activo || d.PerfilUsuarioID == Model.DistribuidorID).Select(item => new SelectListItem
                                       {
                                           Value = item.PerfilUsuarioID.ToString(),
                                           Text = item.Usuario.Login.ToString() + "(" + item.Nombre + " " + item.Apellido + " - " + item.Empresa.Nombre + ") "+ (item.Activo? "": " (I)"),
                                           Selected = item.PerfilUsuarioID == Model.DistribuidorID
                                       }))
            }
            else
            {
                @("No hay Distribuidores en el sistema.")
            }
            @Html.ValidationMessageFor(model => model.DistribuidorID)
            @Html.ValidationMessageFor(model => model.DistribuidoresDisponibles)
        </div>
        
        

        <div class="editor-label">
            @Html.LabelFor(model => model.Descripcion)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Descripcion)
            @Html.ValidationMessageFor(model => model.Descripcion)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Fecha)
        </div>
        <div class="editor-field">
            @* @Html.EditorFor(model => model.Fecha)*@
            @Html.TextBoxFor(model => model.Fecha, new { @Value = Model.Fecha.ToString("dd/MM/yyyy"), @class = "datepicker" })
  
            @Html.ValidationMessageFor(model => model.Fecha)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Aprobado)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Aprobado)
            @Html.ValidationMessageFor(model => model.Aprobado)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Activo)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Activo)
            @Html.ValidationMessageFor(model => model.Activo)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.EjecutivoDeCuenta)
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.EjecutivoDeCuenta.Nombre)
            @Html.HiddenFor(model => model.EjecutivoId)
            @Html.ValidationMessageFor(model => model.EjecutivoId)
        </div>
        <p>
            @Html.HiddenFor(model => model.PedidoID)
            @Html.ValidationMessageFor(model => model.PedidoID)
            <input type="submit" value="Modificar Datos Del pedido" />
        </p>
        <hr />
        <div class="editor-label">
            <label>
                Orden (Las modificaciones se almacenan en el momento de realizarlas)</label>
            <br/>

            <label>Agregar Productos al pedido</label>
        </div>
        <div class="editor-field">
            @if (Model.ProductosDisponibles != null && Model.ProductosDisponibles.Any())
            {

                <div>
                    @Html.DropDownList("prodDispo",
                        Model.ProductosDisponibles.Where(p => p.Activo == true).Select(item => new SelectListItem
                        {
                            Value = item.ProductoID.ToString(),
                            Text = item.Nombre.ToString() + "(" + item.Codigo + ")",
                        }))
                    <input type="text" id="cantidadToAdd" value="1" />
                    <input type="button" value="Agregar" onclick="agregar()" />
                </div>
                <div id="agregarContainer">
                </div>
            }
            else
            {
                @("No hay Productos en el sistema.")
            }
        </div>
     
        <div class="display-label">
            <label>Orden actual:</label>
           
        </div>
        <div class="display-field">
          
            <table id="order">
                <tr>
                    <th>
                        Producto
                    </th>
                    <th>
                        Codigo Producto
                    </th>
                    <th>
                        Cantidad
                    </th>
                    <th>
                        Eliminar?
                    </th>
                </tr>
                @if (Model.Pedido != null)
                {
                     foreach (var item in Model.Pedido.CantidadProductoPedidoList)
                     {
                         <tr class="order-line">
                             <td>@item.Producto.Nombre
                             </td>
                             <td>@item.Producto.Codigo
                             </td>
                             <td>
                                 <input type="hidden" name="Productos" value="@item.Producto.ProductoID"/>
                                 <input type="text" class="Cantidades" id="cantidad_@item.CantidadProductoPedidoID" value="@item.Cantidad"/>
                                 &nbsp;
                                 <input type="button" onclick=" modificarCantidad(@item.Pedido.PedidoID, @item.CantidadProductoPedidoID) " value='>'/>
                             </td>
                             <td>
                                 <input type="button" onclick=" remover($(this), @item.Pedido.PedidoID, @item.CantidadProductoPedidoID) " value="Sacar"/>
                             </td>
                         </tr>
                     }
                }
            </table>
        </div>
    </fieldset>
}
<div>
    @Html.ActionLink("Volver", "List")
</div>
<style>
    #order td, #order th
    {
        border: 1px solid #000000 !important;
    }
</style>
@section Scripts {

    <script type="text/javascript">
        function agregar() {

            var $select = $("#prodDispo");
            var $container = $("#order");
            var $existe = $container.find("input[name='Productos']").filter("input[value='" + $select.val() + "']");
            var $cantidadToAdd = $("#cantidadToAdd");

            if (!$.isNumeric($cantidadToAdd.val())) {
                $cantidadToAdd.focus();
                $cantidadToAdd.notify("Debe ingresar un número", "error");
                return false;
            }

            var valor = parseInt($cantidadToAdd.val());
            if (valor < 1) {
                $cantidadToAdd.notify("El valor ingresado debe ser mayor o igual a 1", "error");
                $cantidadToAdd.focus();
                return false;
            }
            
            if ($existe.length == 0) {
              
                var data = {
                    idPedido: $("#PedidoID").val(),
                    idProducto: $select.val(),
                    cantidad: valor
                };

                $.post("AgregarItemPedidoCantidadProducto", data, function (response) {
                    if (response.Ok) {

                        var idProducto = response.IdProducto;
                        var idItem = response.IdCantidadProductoPedido;
                        var cantidad = response.Cantidad;
                        var idPedido = response.IdPedido;
                        var nombreProducto = response.NombreProducto;
                        var codigoProducto = response.CodigoProducto;
                        var $item = $(
                            "<tr class=\"order-line\">"
                            +"	<td>"+nombreProducto+"</td>"
                            +"	<td>"+codigoProducto+"</td>"
                            +"	<td>"
                            +"		<input type=\"hidden\" name=\"Productos\" value=\""+idProducto+"\"/>"
                            + "		<input type=\"text\" class=\"Cantidades\" id=\"cantidad_" + idItem + "\" value=\"" + cantidad + "\"/>"
                            +"		&nbsp;"
                            +"		<input type=\"button\" onclick=\"modificarCantidad("+idPedido+", "+idItem+")\" value='>'/>"
                            +"	</td>"
                            +"	<td>"
                            +"		<input type=\"button\" onclick=\"remover($(this), "+idPedido+", "+idItem+")\" value=\"Sacar\"/>"
                            +"	</td>"
                            +"</tr>");

                        $container.append($item);
                        $cantidadToAdd.val("1");
                    } else {
                        $cantidadToAdd.notify(response.Message, "error");
                    }
                }, "json");
            } else {
                $existe.siblings().filter(".Cantidades").focus().notify("Ya esta agragado", "error");
                return false;
            }
            return true;
        }

        function modificarCantidad(idPedido, idCantidadPedido) {

            var $valueInput = $("#cantidad_" + idCantidadPedido);
            if (!$.isNumeric($valueInput.val())) {
                $valueInput.notify("El valor ingresado no es numerico", "error");
                return;
            }

            var valor = parseInt($valueInput.val());
            if (valor < 1) {
                $valueInput.notify("El valor ingresado debe ser mayor o igual a 1", "error");
                return;
            }

            var data = {
                idPedido: idPedido,
                idCantidadProductoPedido: idCantidadPedido,
                borrar: false,
                cantidad: valor
            };

            $.post("ModificarPedidoCantidadProducto", data, function (response) {
                if (response.Ok) {
                    $valueInput.val(response.Cantidad);
                    $valueInput.notify("Valor modificado con Exito", "success");
                } else {
                    $valueInput.notify(response.Message, "error");
                }
            }, "json");
        };

        function remover($elem, idPedido, idCantidadPedido) {

            var data = {
                idPedido: idPedido,
                idCantidadProductoPedido: idCantidadPedido,
                borrar: true,
                cantidad: -1
            };

            $.post("ModificarPedidoCantidadProducto", data, function (response) {
                if (response.Ok) {
                    $elem.parent().parent().remove();
                } else {
                    alert(response.Message);
                }
            }, "json");

        }
        $(document).ready(function () {
            $(".datepicker").datepicker({
                dateFormat: 'dd/mm/yy',
                changeMonth: true,
                changeYear: true
              
            });
        });

    </script>
    <script src="/Scripts/notify.min.js" type="text/javascript"></script>
    @Scripts.Render("~/bundles/jqueryval")
   
    
}
