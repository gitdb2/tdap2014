@using uy.edu.ort.taller.aplicaciones.dominio
@using uy.edu.ort.taller.aplicaciones.utiles.Formatters
@model TallerAplicaciones.Models.ProductoConArchivosSubmitModel
@{
    ViewBag.Title = "Editar Producto";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>
    Edit</h2>
@using (Html.BeginForm("Edit", "Producto", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Editar Producto</legend>
        <div class="editor-label">
            @Html.LabelFor(model => model.Nombre)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Nombre)
            @Html.ValidationMessageFor(model => model.Nombre)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Codigo)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Codigo)
            @Html.ValidationMessageFor(model => model.Codigo)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Descripcion)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Descripcion)
            @Html.ValidationMessageFor(model => model.Descripcion)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Activo)
        </div>
        <div class="editor-field">
            @Html.CheckBoxFor(model => model.Activo)
            @Html.ValidationMessageFor(model => model.Activo)
        </div>
        <div class="editor-label">
            <label for="Videos">
                Fotos:</label>
            Fotos Almacenadas (Seleccione para eliminar)
        </div>
        <div class="editor-field">
            <ul class="gallery">
                @{  var formatter = new GalleryHtmlFormatter() { CheckboxName = "DeleteFiles" };
                    if (Model.Producto.Archivos != null)
                    {
                        foreach (var item in Model.Producto.Archivos.OfType<Foto>())
                        {
                    @Html.Raw("<li>") 
                            item.Accept(formatter);
                            Output.Write(formatter.Html);
                    @Html.Raw("</li>") 
                        }
                    }
                }
            </ul>
        </div>
        <div class="editor-label">
            Subir Fotos
        </div>
        <div class="editor-field Fotos">
            <div>
                @Html.TextBoxFor(model => model.Fotos, new { type = "file" })
                &nbsp;<a href="javascript:void(0)" onclick="addNew('Fotos')">[+]</a>
                @Html.ValidationMessageFor(model => model.Fotos)
            </div>
        </div>
        <div class="editor-label">
            <label for="Videos">
                Videos:</label>
            Videos Almacenadas (Seleccione para eliminar)
        </div>
        <div class="editor-field">
            <ul class="gallery">
                @{  
                    if (Model.Producto.Archivos != null)
                    {
                        foreach (var item in Model.Producto.Archivos.OfType<Video>())
                        {
                    @Html.Raw("<li>")
                            item.Accept(formatter);
                            Output.Write(formatter.Html);
                    @Html.Raw("</li>")
                        }
                    }
                }
            </ul>
        </div>
        <div class="editor-label">
            Subir Videos
        </div>
        <div class="editor-field Videos">
            <div>
                @Html.TextBoxFor(model => model.Videos, new { type = "file" })
                &nbsp;<a href="javascript:void(0)" onclick="addNew('Videos')">[+]</a>
                @Html.ValidationMessageFor(model => model.Videos)
            </div>
        </div>
        <hr />
        <div class="editor-label">
            <label>
                Atributos Variables (Las modificaciones se almacenan en el momento de realizarlas)</label>
            <br />
            <label>
                Agregar Atributos al producto</label>
        </div>
        <div class="editor-field">
            @if (Model.ListaDeAtributos != null && Model.ListaDeAtributos.Any(a => a.Activo))
            {
                <div>
                    @Html.DropDownList("atribDisponibles",
                        Model.ListaDeAtributos.Where(p => p.Activo == true).Select(item => new SelectListItem
                        {
                            Value = item.AtributoID.ToString(),
                            Text = item.Nombre.ToString()
                        }), new { @id = "atributoSelect" })
                    <input type="button" value="Crear" onclick="renderAtributo()" />
                </div>
                <div>
                    Item a agregar:</div>
                <div id="agregarContainer">
                </div>
            }
            else
            {
                @("No hay Atributos en el sistema.")
            }
        </div>
        <div class="display-label">
            <label>
                Atributos actuales:</label>
        </div>
        <div class="display-field">
            <table id="atributosTable">
                <tr>
                    <th>
                        Nombre
                    </th>
                    <th>
                        Valores
                    </th>
                    <th>
                        Modificar?
                    </th>
                    <th>
                        Eliminar?
                    </th>
                </tr>
                @if (Model.ListaValorAtributosSimple != null)
                {
                    foreach (var item in Model.ListaValorAtributosSimple)
                    {
                    <tr class="atributo-line">
                        <td>@item.Atributo.Nombre
                        </td>
                        <td>
                            <input type="text" atributoId ="@item.Atributo.AtributoID"  class="valorSimple" id="valorSimple_@item.ValorAtributoID" value="@item.Valor"/>
                        </td>
                        <td>
                            <input type="button" onclick="modificarValorSimple(@Model.ProductoID, @item.ValorAtributoID) " value='>'/>
                        </td>
                        <td>
                            <input type="button" onclick=" removerValorAtributo($(this), @Model.ProductoID, @item.ValorAtributoID) " value="Sacar"/>
                        </td>
                    </tr>
                    }
                }
                @if (Model.ListaValorAtributosCombo != null)
                {
                    foreach (var item in Model.ListaValorAtributosCombo)
                    {

                        var multi = item.Atributo.EsMultiseleccion();
                        var javascriptModificar = "modificarValorCombo";
                        var baseType = "valorCombo";
                        var atributo = (AtributoCombo)Model.ListaDeAtributos.Single(a => a.AtributoID == item.Atributo.AtributoID);


                        if (multi)
                        {
                            baseType += "Multi";
                            javascriptModificar += "Multi";
                        }
                     
                       
                    <tr class="atributo-line">
                        <td>@item.Atributo.Nombre
                        </td>
                        <td>
                            @if (multi)
                            {
                                @Html.ListBox("comboMulti",
                                         atributo.Valores.Select(option => new SelectListItem
                                         {
                                             Value = option.ValorPredefinidoID.ToString(),
                                             Text = option.Valor.ToString() + " (" + (option.Activo ? "A" : "I") + ")",
                                             Selected = item.Valores.Select(v => v.ValorPredefinidoID).ToList().Contains(option.ValorPredefinidoID) ? true : false
                                         }), new { @class = baseType, @id = (baseType + "_" + item.ValorAtributoID), @atributoId = item.Atributo.AtributoID })
                            }
                            else
                            {
                                @Html.DropDownList("combo",
                                         atributo.Valores.Select(option => new SelectListItem
                                         {
                                             Value = option.ValorPredefinidoID.ToString(),
                                             Text = option.Valor.ToString(),
                                             Selected = item.Valores.Select(v => v.ValorPredefinidoID).ToList().Contains(option.ValorPredefinidoID) ? true : false
                                         }), new { @class = baseType, @id = (baseType + "_" + item.ValorAtributoID), @atributoId = item.Atributo.AtributoID })
                            }
                        </td>
                        <td>
                            <input type="button" onclick="@javascriptModificar (@Model.ProductoID, @item.Atributo.AtributoID, @item.ValorAtributoID) " value='>'/>
                        </td>
                        <td>
                            <input type="button" onclick="removerValorAtributo($(this), @Model.ProductoID, @item.ValorAtributoID) " value="Sacar"/>
                        </td>
                    </tr>
                    }
                }
            </table>
        </div>
        <p>
            @Html.HiddenFor(model => model.ProductoID)
            @Html.ValidationMessageFor(model => model.ProductoID)
            <input type="submit" value="Modificar" />
        </p>
    </fieldset>
}
<div>
    @Html.ActionLink("Back to list", "List")
</div>
@section Styles {
    @Styles.Render("~/Content/gallery")
}
@section Scripts {
    <script>
        function openImage(elem) {
            window.open(elem.attr("data"));
        }

        function openVideo(elem) {
            window.open(elem.attr("data"));
        }

        function addNew(name) {
            $("." + name).append($('<div><input type="file" value="" name="' + name + '" />' +
                '<a href="javascript:void(0)" onclick="$(this).parent().remove()">[x]</a>' +
                '</div>'));
        }

        function removerValorAtributo($elem, idProducto, idValorAtributo) {
            var data = {
                idProducto: idProducto,
                idValorAtributo: idValorAtributo
            };
            $.post("RemoverValorAtributo", data, function(response) {
                if (response.Ok) {
                    $elem.parent().parent().remove();
                } else {
                    $elem.notify(response.Message, "error");
                }
            }, "json");
        }

        function modificarValorSimple(idProducto, idValorAtributoSimple) {
            if ($("#valorSimple_" + idValorAtributoSimple).val().length == 0) {
                $("#valorSimple_" + idValorAtributoSimple).focus();
                $("#valorSimple_" + idValorAtributoSimple).notify("Debe ingresar un valor", "error");
                return false;
            }

            var data = {
                idValorAtributoSimple: idValorAtributoSimple,
                nuevoValor: $("#valorSimple_" + idValorAtributoSimple).val()
            };

            $.post("ModificarValorAtributoSimple", data, function(response) {
                if (response.Ok) {
                    $("#valorSimple_" + idValorAtributoSimple).val(response.NuevoValor);
                    $("#valorSimple_" + idValorAtributoSimple).notify(response.Message,  "success");
                } else {
                    $("#valorSimple_" + idValorAtributoSimple).notify(response.Message, "error");
                }
            }, "json");
        }

        function modificarValorComboMulti(idProducto, idAtributo, idValorAtributo) {
            var seleccionados = $("#valorComboMulti_" + idValorAtributo).val();
            modificarValorComboGenerico(idProducto, idAtributo, idValorAtributo, seleccionados.map(Number));
        }

        function modificarValorCombo(idProducto, idAtributo, idValorAtributo) {
            var seleccionados = new Array($("#valorCombo_" + idValorAtributo).val());
            modificarValorComboGenerico(idProducto, idAtributo, idValorAtributo, seleccionados.map(Number));
        }

        function modificarValorComboGenerico(idProducto, idAtributo, idValorAtributo, listaElementos) {
            var data = {
                idProducto: idProducto,
                idAtributo: idAtributo,
                idValorAtributo: idValorAtributo,
                listaIdValorAtributo: listaElementos
            };
            $.post("ModificarValorCombo", data, function(response) {
                if (response.Ok) {
                    actualizarValoresCombo(response);
                } else {
                    var $atributosEncontrados = $("#atributosTable").find("[atributoid=" + response.AtributoId + "]");
                    $atributosEncontrados.notify(response.Message, "error");
                }
            }, "json");
        }
       
        function renderAtributo() {
            var idAtributo = $("#atributoSelect").val();

            var data = {
                valorIdAtributo: idAtributo,
            };

            $.post("../Atributo/ObtenerValoresAtributos", data, function(response) {
                if (response.Ok) {
                    if (response.esCombo == false) {
                        printHTMLAtributoSimple(response);
                    } else {
                        printHTMLAtributoCombo(response, response.esMultiselec);
                    }
                } else {
                    alert(response.Message);
                }
            }, "json");
        }

        function printHTMLAtributoSimple(response) {
            var html = '<div class="addItem"><label>' + response.nombreAtributo + '</label>' +
                '<input placeholder="Valor" id="tempItemToAdd" idatrib="' + response.idAtributo + '" type="text" value="" />' +
                '<input type="button" value="Agregar" onclick="agregarValorAtributoSimple('+response.idAtributo+')"/>' +
                '</div>';
            $("#agregarContainer").html(html);
        }

        function agregarValorAtributoSimple(idAtributo) {
            if ($.trim($("#tempItemToAdd").val()).length == 0) {
                $("#tempItemToAdd").focus();
                $("#tempItemToAdd").notify("Debe ingresar un valor", "error");
                return false;
            }
            var check = checkExiste($("#atributosTable"), idAtributo);
            if (check.OK) {
                var data = {
                        idProducto: $("#ProductoID").val(),
                        idAtributoSimple: $("#tempItemToAdd").attr("idatrib"),
                        nuevoValor: $("#tempItemToAdd").val()
                    };
                 $.post("AgregarValorAtributoSimple", data, function(response) {
                    if (response.Ok) {
                        renderSimple($("#atributosTable"), response);
                    } else {
                         check.elem.notify(response.Message, "error");
                    }
                }, "json");
            } else {
                check.elem.notify(check.message, "error");
            }
        }

        function renderSimple($container, response) {
            var html = '<tr class="atributo-line">'
                + '<td>' + response.NombreAtributo + '</td>'
                + '<td>'
                + '<input type="text" atributoId="'+response.AtributoId +'" value="' + response.NuevoValor + '" id="valorSimple_' + response.ValorAtributoId + '" class="valorSimple">'
                + '</td>'
                + '<td>'
                + '<input type="button" value="&gt;" onclick="modificarValorSimple(' + response.ProductoId + ',' + response.ValorAtributoId + ')">'
                + '</td>'
                + '<td>'
                + '<input type="button" value="Sacar" onclick="removerValorAtributo($(this),' + response.ProductoId + ',' + response.ValorAtributoId + ') ">'
                + '</td>'
                + '</tr>';
            $container.append(html);
        }

        ////COMBOS
        function printHTMLAtributoCombo(response, multi) {
            var html = '<div class="addItem"><label>' + response.nombreAtributo + '</label>' +
                '<select  id="tempItemToAdd" idatrib="' + response.idAtributo + '" ' + (multi ? ' multiple="multiple "' : '') + '>';

            for (var i = 0; i < response.litaValores.length; i++) {
                html += "<option value=\"" + response.litaValores[i].id + "\" " + (i == 0 ? " selected " : "") + "> "
                    + response.litaValores[i].valor + " </option> ";
            }

            html += '</select>' +
                '<input type="button" value="Agregar" onclick="agregarValorCombo(' + multi + ')"/>' +
                '</div>';
            $("#agregarContainer").html(html);
            $("#tempItemToAdd").data("metadata", response);
        }

        function agregarValorCombo(multi) {
            var $select = $("#tempItemToAdd");
            var metadata = $select.data("metadata");
            var idAtributo = $("#tempItemToAdd").attr("idatrib");

            var selectedValues = "";

            if (multi) {
                selectedValues = $select.val();
            } else {
                selectedValues = new Array($select.val()); 
            }

            //trasforma a array de int
            selectedValues = selectedValues.map(Number);

	  		var check = checkExiste($("#atributosTable"), idAtributo);
		    if (check.OK) {
		        var data = {
		            idProducto : $("#ProductoID").val(),
		            idAtributo : idAtributo,
		            listaIdValorPredefinido : selectedValues
		        };

		        $.post("AgregarValorAtributoComboMulti", data, function(response) {
		            if (response.Ok) {
		                renderCombo($("#atributosTable"), metadata, response);
		            } else {
		                 check.elem.notify(response.Message, "error");
		            }
		        }, "json");
	 		} else {
		        check.elem.notify(check.message, "error");
		    }
        }

        function checkExiste($container, idAtributo) {
            var $atributosEncontrados = $("#atributosTable").find("[atributoid=" + idAtributo + "]");
            if ($atributosEncontrados.length == 0) {
                return { OK: true, message:"", elem:$atributosEncontrados };
            }
            return { OK: false, message:"El atributo ya Existe en el Producto", elem:$atributosEncontrados };
        }

        function renderCombo($container, metadata, response) {

            var multiple = metadata.esMultiselec;
            var multiText = multiple ? "Multi" : "";
            var className = "valorCombo" + multiText;
            var idCombo = className + "_" + response.ValorAtributoId;
            var nombre = "combo" + multiText;

            var nombreFuncionModificar = "modificarValorCombo" + multiText;

            var html = '<tr class="atributo-line">'
                + '<td>'+metadata.nombreAtributo+'</td>'
                + '<td>'
                + '<select atributoId="' + response.AtributoId + '" name="' + nombre + '" ' + (multiple ? "multiple" : "") + ' id="' + idCombo + '" class="' + className + '">';

            for (var i = 0; i < metadata.litaValores.length; i++) {
                var idVal = metadata.litaValores[i].id;
                var selected = $.inArray(idVal, response.ListaValorPredefinidoId) >= 0 ? " selected='selected' " : "";

                html += "<option value=\"" + idVal + "\" " + selected + "> "
                    + metadata.litaValores[i].valor + " (A)</option> ";
            }
            html += '</td>'
                + '<td>'
                + '<input type="button" value="&gt;" onclick="'
                        +nombreFuncionModificar+'('+response.ProductoId+', '+response.AtributoId +', '+response.ValorAtributoId+') ">'
                + '</td>'
                + '<td>'
                + '<input type="button" value="Sacar" onclick="removerValorAtributo($(this),' + response.ProductoId + ',' + response.ValorAtributoId + ')">'
                + '</td>'
                + '</tr>';
            $container.append(html);
        }


        function actualizarValoresCombo(response){
//			var response ={
//				ProductoId :5
//				,AtributoId:1
//				,ValorAtributoId:9
//				,ListaValorPredefinidoId:[2]
//			};
			
			var $select = $("#atributosTable").find("[atributoid=" + response.AtributoId + "]");

			$select.find("option").each(function(){
				if($.inArray(parseInt($(this).val()), response.ListaValorPredefinidoId) >= 0){
				    $(this).attr('selected', true);
				}else{
					$(this).removeAttr("selected");
				}
				
			});
            $select.notify(response.Message,  "success");
        }

        $(document).ready(function () {
            //para que la lista de int llegue bien al controller
            jQuery.ajaxSettings.traditional = true;
        });

    </script>
    <script src="/Scripts/notify.min.js" type="text/javascript"></script>
    @Scripts.Render("~/bundles/jqueryval")
}
