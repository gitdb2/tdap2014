@using uy.edu.ort.taller.aplicaciones.dominio
@using uy.edu.ort.taller.aplicaciones.utiles.Formatters
@model TallerAplicaciones.Models.ProductoConArchivosSubmitModel
@{
    ViewBag.Title = "Editar Producto";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>
    Edit</h2>
@using (Html.BeginForm("Edit", "Producto", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Editar Producto</legend>
        <div class="editor-label">
            @Html.LabelFor(model => model.Nombre)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Nombre)
            @Html.ValidationMessageFor(model => model.Nombre)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Codigo)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Codigo)
            @Html.ValidationMessageFor(model => model.Codigo)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Descripcion)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Descripcion)
            @Html.ValidationMessageFor(model => model.Descripcion)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Activo)
        </div>
        <div class="editor-field">
            @Html.CheckBoxFor(model => model.Activo)
            @Html.ValidationMessageFor(model => model.Activo)
        </div>
        <div class="editor-label">
            <label for="Videos">Fotos:</label>
           
            Fotos Almacenadas (Seleccione para eliminar)
        </div>
        <div class="editor-field">
            <ul class="gallery">
                @{  var formatter = new GalleryHtmlFormatter() { CheckboxName = "DeleteFiles" };
                    if (Model.Producto.Archivos != null)
                    {
                        foreach (var item in Model.Producto.Archivos.OfType<Foto>())
                        {
                            @Html.Raw("<li>") 
                            item.Accept(formatter);
                            Output.Write(formatter.Html);
                            @Html.Raw("</li>") 
                        }
                    }
                }
            </ul>
        </div>
         <div class="editor-label">
            Subir Fotos
        </div>
          <div class="editor-field Fotos">
            <div>
              
                @Html.TextBoxFor(model => model.Fotos, new { type = "file" })
                &nbsp;<a href="javascript:void(0)" onclick="addNew('Fotos')">[+]</a>
                 @Html.ValidationMessageFor(model => model.Fotos)
            </div>
        </div>
      

        
        <div class="editor-label">
            <label for="Videos">Videos:</label>
            
            Videos Almacenadas (Seleccione para eliminar)
        </div>
        <div class="editor-field">
            <ul class="gallery">
                @{  
                    if (Model.Producto.Archivos != null)
                    {
                        foreach (var item in Model.Producto.Archivos.OfType<Video>())
                        {
                            @Html.Raw("<li>")
                            item.Accept(formatter);
                            Output.Write(formatter.Html);
                            @Html.Raw("</li>")
                        }
                    }
                }
            </ul>
        </div>
         <div class="editor-label">
            Subir Videos
        </div>
          <div class="editor-field Videos">
            <div>
               
                @Html.TextBoxFor(model => model.Videos, new { type = "file" })
                &nbsp;<a href="javascript:void(0)" onclick="addNew('Videos')">[+]</a>
                 @Html.ValidationMessageFor(model => model.Videos)
            </div>
        </div>
        
        <hr/>
        <div class="editor-label">
            <label>
                Atributos Variables (Las modificaciones se almacenan en el momento de realizarlas)</label>
            <br/>

            <label>Agregar Atributos al producto</label>
        </div>
        <div class="editor-field">
            @if (Model.ListaDeAtributos != null && Model.ListaDeAtributos.Any(a => a.Activo))
            {
                <div>
                    @Html.DropDownList("atribDisponibles",
                         Model.ListaDeAtributos.Where(p => p.Activo == true).Select(item => new SelectListItem
                        {
                            Value = item.AtributoID.ToString(),
                            Text = item.Nombre.ToString()
                        }))
                    <input type="button" value="Agregar" onclick="renderAtributo()" />
                </div>
                <div id="agregarContainer">
                </div>
            }
            else
            {
                @("No hay Atributos en el sistema.")
            }
        </div>
     
        <div class="display-label">
            <label>Atributos actual:</label>
        </div>
        <div class="display-field">
          
            <table id="atributos">
                <tr>
                    <th>
                        Nombre
                    </th>
                    <th>
                        Valores
                    </th>
                    <th>
                        Modificar?
                    </th>
                    <th>
                        Eliminar?
                    </th>
                </tr>
                @if (Model.ListaValorAtributosSimple != null)
                {
                    foreach (var item in Model.ListaValorAtributosSimple)
                     {
                         <tr class="atributo-line">
                             <td>@item.Atributo.Nombre
                             </td>
                             <td>
                                 <input type="text" class="valorSimple" id="valorSimple_ @item.ValorAtributoID" value="@item.Valor"/>
                             </td>
                             <td>
                                 <input type="button" onclick="modificarValorSimple(@Model.ProductoID, @item.ValorAtributoID) " value='>'/>
                             </td>
                             <td>
                                 <input type="button" onclick=" removerValorAtributo($(this), @Model.ProductoID, @item.ValorAtributoID) " value="Sacar"/>
                             </td>
                         </tr>
                     }
                }
                
                 @if (Model.ListaValorAtributosCombo != null)
                {
                    foreach (var item in Model.ListaValorAtributosCombo)
                    {

                        var multi = item.Atributo.EsMultiseleccion();
                        var javascriptModificar = "modificarValorCombo";
                        var baseType = "valorCombo";
                        var multiple = multi ? "multiple" : "";
                        var atributo = (AtributoCombo) Model.ListaDeAtributos.Single(a => a.AtributoID == item.Atributo.AtributoID);
                        

                        if (multi)
                        {
                            baseType += "Multi";
                            javascriptModificar += "Multi";
                        }
                       
                         <tr class="atributo-line">
                             <td>@item.Atributo.Nombre
                             </td>
                             <td>
                                 @if (multi)
                                 {
                                     @Html.ListBox("comboMulti",
                                         atributo.Valores.Select(option => new SelectListItem
                                         {
                                             Value = option.ValorPredefinidoID.ToString(),
                                             Text = option.Valor.ToString() + "("+ (option.Activo? "A" : "I") + ")",
                                             Selected = item.Valores.Select(v => v.ValorPredefinidoID).ToList().Contains(option.ValorPredefinidoID) ? true : false
                                         }), new {@class = baseType, @id = (baseType + "_" + item.ValorAtributoID)})
                                 }
                                 else
                                 {
                                      @Html.DropDownList("combo",
                                         atributo.Valores.Select(option => new SelectListItem
                                         {
                                             Value = option.ValorPredefinidoID.ToString(),
                                             Text = option.Valor.ToString(),
                                             Selected = item.Valores.Select(v => v.ValorPredefinidoID).ToList().Contains(option.ValorPredefinidoID) ? true : false
                                         }), new { @class = baseType, @id = (baseType + "_" + item.ValorAtributoID),  })
                                 }
                             </td>
                             <td>
                                 <input type="button" onclick="@javascriptModificar (@Model.ProductoID, @item.ValorAtributoID) " value='>'/>
                             </td>
                             <td>
                                 <input type="button" onclick="removerValorAtributo($(this), @Model.ProductoID, @item.ValorAtributoID) " value="Sacar"/>
                             </td>
                         </tr>
                    }
                }
            </table>
        </div>
        
        
        
        
        
        

        <p>
           
            @Html.HiddenFor(model => model.ProductoID)
            @Html.ValidationMessageFor(model => model.ProductoID)
            <input type="submit" value="Modificar" />
        </p>
    </fieldset>
}
<div>
    @Html.ActionLink("Back to list", "List")
</div>
@section Styles {
    @Styles.Render("~/Content/gallery")
}
@section Scripts {
    <script>
        function openImage(elem) {
            window.open(elem.attr("data"));
        }

        function openVideo(elem) {
            window.open(elem.attr("data"));
        }

        function addNew(name) {
            $("." + name).append($('<div><input type="file" value="" name="' + name + '" />' +
                '<a href="javascript:void(0)" onclick="$(this).parent().remove()">[x]</a>' +
                '</div>'));
        }

        function removerValorAtributo($elem, idProducto, idValorAtributo) {
            var data = {
                idProducto: idProducto,
                idValorAtributo: idValorAtributo
            };

            $.post("RemoverValorAtributo", data, function (response) {
                if (response.Ok) {
                    $elem.parent().parent().remove();
                } else {
                    alert(response.Message);
                }
            }, "json");
        }

        function editarValorAtributoSimple($elem, idValorAtributoSimple, nuevoValor) {
            var data = {
                idValorAtributoSimple: idValorAtributoSimple,
                nuevoValor : nuevoValor
            };

            $.post("EditarValorAtributoSimple", data, function (response) {
                if (response.Ok) {
                    //TODO ver que hace
                    //mandar al listado con el nuevo valor
                } else {
                    alert(response.Message);
                }
            }, "json");
        }

        function agregarValorAtributoSimple($elem, idProducto, nuevoValor) {
            var data = {
                idProducto: idProducto,
                nuevoValor: nuevoValor
            };  

            $.post("AgregarValorAtributoSimple", data, function (response) {
                if (response.Ok) {
                    //TODO ver
                    //$elem.parent().parent().remove();
                } else {
                    alert(response.Message);
                }
            }, "json");
        }

        function modificarValorCombo(idProducto, idValorAtributo) {
            var data = {
                idProducto: idProducto,
                idValorAtributo: idValorAtributo
            };

            $.post("ModificarValorCombo", data, function (response) {
                if (response.Ok) {
                    //TODO ver
                    //$elem.parent().parent().remove();
                } else {
                    alert(response.Message);
                }
            }, "json");
        }

        function modificarValorComboMulti(idProducto, idValorAtributo) {
            var data = {
                idProducto: idProducto,
                listaIdValorAtributo: idValorAtributo
            };
           
           //TODO
           //$("#comboValueMulti_" + idValorAtributo)

            $.post("ModificarValorCombo", data, function (response) {
                if (response.Ok) {
                    //TODO ver
                    //$elem.parent().parent().remove();
                } else {
                    alert(response.Message);
                }
            }, "json");
        }

    </script>
    @Scripts.Render("~/bundles/jqueryval")
}
